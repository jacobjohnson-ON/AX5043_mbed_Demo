// Demo application using an mbed MCU to control an AX5043 transceiver in master Tx mode
#include "ax5043.h"
#include "mbed.h"

// mbed OS global(s)
Serial pc(USBTX, USBRX);

// Radio globals needed to extract PER information
uint8_t ax5043_pktlen;
int16_t ax5043_rssi;
int32_t ax5043_offset;
int16_t ax5043_offset_hz;
uint8_t ax5043_rxbuffer[PKTDATA_BUFLEN];

// Application global(s)
uint16_t pkts_received = 0, pkts_missing = 0;
uint16_t per_test_counter, per_test_counter_previous;

// Application function prototypes
void display_packet();

// Main application function
int main() {

	ax5043_spi_init();

	// Configure the serial speed.
    pc.baud(115200);
    pc.printf("AX5043 Receiver slave demo application with mbed MCU\n\n");

    // Reset the AX5043 through SPI
    pc.printf("\nResetting AX5043 chip...\n");
    ax5043_reset();
    pc.printf("\nDone...\n\n");

    // Setup the registers using the template generated by RadioLab
    pc.printf("\nSetting up AX5043 radio registers...\n");
    ax5043_radio_setup_rx();
    pc.printf("\nDone...\n\n");

    // Do the auto ranging
    pc.printf("\nPerforming AX5043 PLL auto-ranging...\n");
    if (ax5043_pll_ranging()) {
    	pc.printf("\n\tPLL ranging has failed...\n");
    }
    else {
    	pc.printf("\n\tPLL ranging successful...\n");
    }
    pc.printf("\nDone...\n\n");

    pc.printf("\nTurn on the AX5043 receiver continuously...\n");
    ax5043_receiver_on_continuous();
    pc.printf("\nDone...\n\n");

    pc.printf("\nWaiting for packet...\n");

    while(1) {        
    	// FIFO not empty interrupt
    	if(ax5043_get_register(AX5043_IRQREQUEST0) & 0x01) {
    		ax5043_receive_isr();
			pkts_received++;
			display_packet();
			continue;
    	}
    }
}

// Application support functions
void display_packet() {

	// Determine how many packets have been lost
    per_test_counter_previous = per_test_counter;
    per_test_counter = ((ax5043_rxbuffer[4])<<8) | ax5043_rxbuffer[3];
    if (pkts_received != 1) {
        pkts_missing += per_test_counter - per_test_counter_previous - 1;
    }
    // Print results to terminal
    pc.printf("\n");
    pc.printf("***************************************************************\n");
    pc.printf("Current packet length			= %i (dec)\n", ax5043_pktlen);
    pc.printf("Current packet data				= 0x");
    // Display the packet and reception info
    uint16_t i;
	const uint8_t *pktdata = ax5043_rxbuffer;
	for (i=0; i < ax5043_pktlen; i++) {
		pc.printf("%02X", pktdata[i]);
	}
    pc.printf(" (hex)\n");
    pc.printf("Current packet RSSI				= %i (dBm)\n", ax5043_rssi);
    pc.printf("Current packet frequency offset	= %i (Hz) \n", ax5043_offset_hz);
    pc.printf("---------------------------------------------------------------\n");
    pc.printf("Number of packets sent			= %i (dec)\n", per_test_counter);
    pc.printf("Number of packets received		= %i (dec)\n", pkts_received);
    pc.printf("Number of lost packets			= %i (dec)\n", pkts_missing);
    pc.printf("---------------------------------------------------------------\n");
    pc.printf("Current packet error rate PER	= %f (pct)\n", (100*((float)pkts_missing/(float)pkts_received)));
    pc.printf("***************************************************************\n");
    pc.printf("\n");

}
